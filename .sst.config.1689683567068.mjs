import { createRequire as topLevelCreateRequire } from 'module';const require = topLevelCreateRequire(import.meta.url);
var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });

// stacks/auth/AuthStack.js
import * as iam from "aws-cdk-lib/aws-iam";
import { Cognito, use as use2 } from "sst/constructs";

// stacks/user_management/UsersStorageStack.js
import { Bucket, Table } from "sst/constructs";
function UsersStorageStack({ stack, app }) {
  const bucket = new Bucket(stack, "UsersUploads", {
    cors: [
      {
        maxAge: "1 day",
        allowedOrigins: ["*"],
        allowedHeaders: ["*"],
        allowedMethods: ["GET", "PUT", "POST", "DELETE", "HEAD"]
      }
    ]
  });
  const table = new Table(stack, "Users", {
    fields: {
      PK: "string",
      SK: "string"
    },
    primaryIndex: { partitionKey: "PK", sortKey: "SK" }
  });
  return {
    table,
    bucket
  };
}
__name(UsersStorageStack, "UsersStorageStack");

// stacks/user_management/UsersApiStack.js
import { Api, use } from "sst/constructs";
function UsersApiStack({ stack, app }) {
  const { table } = use(UsersStorageStack);
  const api = new Api(stack, "UsersApi", {
    defaults: {
      authorizer: "iam",
      function: {
        bind: [table]
      }
    },
    routes: {
      "POST /users": "packages/functions/src/user_management/create.main",
      "GET /users/{id}": "packages/functions/src/user_management/get.main",
      "GET /users": "packages/functions/src/user_management/list.main",
      "PUT /users/{id}": "packages/functions/src/user_management/update.main",
      "DELETE /users/{id}": "packages/functions/src/user_management/delete.main",
      "POST /photoAlbums": "packages/functions/src/images/create.main",
      "PUT /photoAlbums/{id}": "packages/functions/src/images/update.main"
    }
  });
  stack.addOutputs({
    ApiEndpoint: api.url
  });
  return {
    api
  };
}
__name(UsersApiStack, "UsersApiStack");

// stacks/auth/AuthStack.js
function AuthStack({ stack, app }) {
  const { bucket } = use2(UsersStorageStack);
  const { api } = use2(UsersApiStack);
  const auth = new Cognito(stack, "Auth", {
    login: ["email"]
  });
  auth.attachPermissionsForAuthUsers(stack, [
    api,
    new iam.PolicyStatement({
      actions: ["s3:*"],
      effect: iam.Effect.ALLOW,
      resources: [
        bucket.bucketArn + "/private/${cognito-identity.amazonaws.com:sub}/*"
      ]
    })
  ]);
  stack.addOutputs({
    Region: app.region,
    UserPoolId: auth.userPoolId,
    IdentityPoolId: auth.cognitoIdentityPoolId,
    UserPoolClientId: auth.userPoolClientId
  });
  return {
    auth
  };
}
__name(AuthStack, "AuthStack");

// stacks/FrontendStack.js
import { StaticSite, use as use3 } from "sst/constructs";
function FrontendStack({ stack, app }) {
  const { auth } = use3(AuthStack);
  const { api } = use3(UsersApiStack);
  const { bucket } = use3(UsersStorageStack);
  const site = new StaticSite(stack, "ReactSite", {
    path: "frontend",
    buildOutput: "build",
    buildCommand: "npm run build",
    environment: {
      REACT_APP_API_URL: api.customDomainUrl || api.url,
      REACT_APP_REGION: app.region,
      REACT_APP_BUCKET: bucket.bucketName,
      REACT_APP_USER_POOL_ID: auth.userPoolId,
      REACT_APP_IDENTITY_POOL_ID: auth.cognitoIdentityPoolId,
      REACT_APP_USER_POOL_CLIENT_ID: auth.userPoolClientId
    }
  });
  stack.addOutputs({
    SiteUrl: site.url || "http://localhost:3000"
  });
}
__name(FrontendStack, "FrontendStack");

// sst.config.ts
var sst_config_default = {
  config(_input) {
    return {
      name: "venue-vista",
      region: "us-east-1"
    };
  },
  stacks(app) {
    app.stack(UsersStorageStack).stack(UsersApiStack).stack(AuthStack).stack(FrontendStack);
  }
};
export {
  sst_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
